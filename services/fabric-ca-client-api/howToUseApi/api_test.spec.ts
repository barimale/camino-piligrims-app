// /**
//  * Fabric CA Server API
//  * Hyperledger Fabric CA Server APIs provides certificate authority services for the blockchain.
//  *
//  * OpenAPI spec version: 0.7.0
//  * 
//  *
//  * NOTE: This file is auto generated by the swagger code generator program.
//  * https://github.com/swagger-api/swagger-codegen.git
//  * Do not edit the file manually.
//  */

// import * as api from "./api"
// import { Configuration } from "./configuration"

// const config: Configuration = {}

// describe("FabricCaServerApi", () => {
//   let instance: api.FabricCaServerApi
//   beforeEach(function() {
//     instance = new api.FabricCaServerApi(config)
//   });

//   test("apiV1AffiliationsAffiliationDelete", () => {
//     const affiliation: string = "affiliation_example"
//     const authorization: string = "authorization_example"
//     const ca: string = "ca_example"
//     const force: boolean = true
//     return expect(instance.apiV1AffiliationsAffiliationDelete(affiliation, authorization, ca, force, {})).resolves.toBe(null)
//   })
//   test("apiV1AffiliationsAffiliationGet", () => {
//     const affiliation: string = "affiliation_example"
//     const authorization: string = "authorization_example"
//     const ca: string = "ca_example"
//     return expect(instance.apiV1AffiliationsAffiliationGet(affiliation, authorization, ca, {})).resolves.toBe(null)
//   })
//   test("apiV1AffiliationsAffiliationPut", () => {
//     const body: api.Body5 = undefined
//     const authorization: string = "authorization_example"
//     const affiliation: string = "affiliation_example"
//     const ca: string = "ca_example"
//     const force: boolean = true
//     return expect(instance.apiV1AffiliationsAffiliationPut(body, authorization, affiliation, ca, force, {})).resolves.toBe(null)
//   })
//   test("apiV1AffiliationsGet", () => {
//     const authorization: string = "authorization_example"
//     const ca: string = "ca_example"
//     return expect(instance.apiV1AffiliationsGet(authorization, ca, {})).resolves.toBe(null)
//   })
//   test("apiV1AffiliationsPost", () => {
//     const body: api.Body4 = undefined
//     const authorization: string = "authorization_example"
//     const ca: string = "ca_example"
//     const force: boolean = true
//     return expect(instance.apiV1AffiliationsPost(body, authorization, ca, force, {})).resolves.toBe(null)
//   })
//   test("apiV1CainfoGet", () => {
//     const ca: string = "ca_example"
//     return expect(instance.apiV1CainfoGet(ca, {})).resolves.toBe(null)
//   })
//   test("apiV1CertificatesGet", () => {
//     const authorization: string = "authorization_example"
//     const id: string = "id_example"
//     const aki: string = "aki_example"
//     const serial: string = "serial_example"
//     const revokedStart: string = "revokedStart_example"
//     const revokedEnd: string = "revokedEnd_example"
//     const expiredStart: string = "expiredStart_example"
//     const expiredEnd: string = "expiredEnd_example"
//     const notexpired: boolean = true
//     const notrevoked: boolean = true
//     const ca: string = "ca_example"
//     return expect(instance.apiV1CertificatesGet(authorization, id, aki, serial, revokedStart, revokedEnd, expiredStart, expiredEnd, notexpired, notrevoked, ca, {})).resolves.toBe(null)
//   })
//   test("apiV1EnrollPost", () => {
//     const body: api.Body = undefined
//     const authorization: string = "authorization_example"
//     const ca: string = "ca_example"
//     return expect(instance.apiV1EnrollPost(body, authorization, ca, {})).resolves.toBe(null)
//   })
//   test("apiV1GencrlPost", () => {
//     const body: api.any = undefined
//     const authorization: string = "authorization_example"
//     const ca: string = "ca_example"
//     return expect(instance.apiV1GencrlPost(body, authorization, ca, {})).resolves.toBe(null)
//   })
//   test("apiV1IdemixCredentialPost", () => {
//     const body: api.Body1 = undefined
//     const authorization: string = "authorization_example"
//     const ca: string = "ca_example"
//     return expect(instance.apiV1IdemixCredentialPost(body, authorization, ca, {})).resolves.toBe(null)
//   })
//   test("apiV1IdemixCriPost", () => {
//     const body: api.any = undefined
//     const authorization: string = "authorization_example"
//     const ca: string = "ca_example"
//     return expect(instance.apiV1IdemixCriPost(body, authorization, ca, {})).resolves.toBe(null)
//   })
//   test("apiV1IdentitiesGet", () => {
//     const authorization: string = "authorization_example"
//     const ca: string = "ca_example"
//     return expect(instance.apiV1IdentitiesGet(authorization, ca, {})).resolves.toBe(null)
//   })
//   test("apiV1IdentitiesIdDelete", () => {
//     const id: string = "id_example"
//     const authorization: string = "authorization_example"
//     const ca: string = "ca_example"
//     const force: boolean = true
//     return expect(instance.apiV1IdentitiesIdDelete(id, authorization, ca, force, {})).resolves.toBe(null)
//   })
//   test("apiV1IdentitiesIdGet", () => {
//     const id: string = "id_example"
//     const authorization: string = "authorization_example"
//     const ca: string = "ca_example"
//     return expect(instance.apiV1IdentitiesIdGet(id, authorization, ca, {})).resolves.toBe(null)
//   })
//   test("apiV1IdentitiesIdPut", () => {
//     const body: api.Body7 = undefined
//     const authorization: string = "authorization_example"
//     const id: string = "id_example"
//     const ca: string = "ca_example"
//     return expect(instance.apiV1IdentitiesIdPut(body, authorization, id, ca, {})).resolves.toBe(null)
//   })
//   test("apiV1IdentitiesPost", () => {
//     const body: api.Body6 = undefined
//     const authorization: string = "authorization_example"
//     const ca: string = "ca_example"
//     return expect(instance.apiV1IdentitiesPost(body, authorization, ca, {})).resolves.toBe(null)
//   })
//   test("apiV1ReenrollPost", () => {
//     const body: api.Body2 = undefined
//     const authorization: string = "authorization_example"
//     const ca: string = "ca_example"
//     return expect(instance.apiV1ReenrollPost(body, authorization, ca, {})).resolves.toBe(null)
//   })
//   test("apiV1RegisterPost", () => {
//     const body: api.Body3 = undefined
//     const authorization: string = "authorization_example"
//     const ca: string = "ca_example"
//     return expect(instance.apiV1RegisterPost(body, authorization, ca, {})).resolves.toBe(null)
//   })
//   test("apiV1RevokePost", () => {
//     const body: api.any = undefined
//     const authorization: string = "authorization_example"
//     const ca: string = "ca_example"
//     return expect(instance.apiV1RevokePost(body, authorization, ca, {})).resolves.toBe(null)
//   })
// })

