/* tslint:disable */
/* eslint-disable */
/**
 * Fabric CA Server API
 * Hyperledger Fabric CA Server APIs provides certificate authority services for the blockchain.
 *
 * OpenAPI spec version: 0.7.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { Body } from '../models';
import { Body1 } from '../models';
import { Body2 } from '../models';
import { Body3 } from '../models';
import { Body4 } from '../models';
import { Body5 } from '../models';
import { Body6 } from '../models';
import { Body7 } from '../models';
import { InlineResponse200 } from '../models';
import { InlineResponse2001 } from '../models';
import { InlineResponse2002 } from '../models';
import { InlineResponse2003 } from '../models';
import { InlineResponse2004 } from '../models';
import { InlineResponse2005 } from '../models';
import { InlineResponse2006 } from '../models';
import { InlineResponse2007 } from '../models';
import { InlineResponse2008 } from '../models';
import { InlineResponse201 } from '../models';
import { InlineResponse2011 } from '../models';
import { InlineResponse2012 } from '../models';
import { InlineResponse2013 } from '../models';
import { InlineResponse2014 } from '../models';
/**
 * FabricCaServerApi - axios parameter creator
 * @export
 */
export const FabricCaServerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete an affiliation.   The caller must have **hf.AffiliationMgr** authority.
         * @param {string} affiliation An affiliation path
         * @param {string} authorization An enrollment token consisting of two base 64 encoded parts separated by a period:    * an enrollment certificate;    * a signature over the certificate and body of request.
         * @param {string} [ca] The name of the CA to direct this request to within the server, or the default CA if not specified
         * @param {boolean} [force] If there are any child affiliations or any identities are associated with this affiliation or child affiliations, force causes these identities and child affiliations to be deleted; otherwise, an error is returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AffiliationsAffiliationDelete: async (affiliation: string, authorization: string, ca?: string, force?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'affiliation' is not null or undefined
            if (affiliation === null || affiliation === undefined) {
                throw new RequiredError('affiliation','Required parameter affiliation was null or undefined when calling apiV1AffiliationsAffiliationDelete.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling apiV1AffiliationsAffiliationDelete.');
            }
            const localVarPath = `/api/v1/affiliations/{affiliation}`
                .replace(`{${"affiliation"}}`, encodeURIComponent(String(affiliation)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ca !== undefined) {
                localVarQueryParameter['ca'] = ca;
            }

            if (force !== undefined) {
                localVarQueryParameter['force'] = force;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * List a specific affiliation at or below the caller's affinity.   The caller must have **hf.AffiliationMgr** authority.
         * @param {string} affiliation An affiliation path
         * @param {string} authorization An enrollment token consisting of two base 64 encoded parts separated by a period:    * an enrollment certificate;    * a signature over the certificate and body of request.
         * @param {string} [ca] The name of the CA to direct this request to within the server, or the default CA if not specified
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AffiliationsAffiliationGet: async (affiliation: string, authorization: string, ca?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'affiliation' is not null or undefined
            if (affiliation === null || affiliation === undefined) {
                throw new RequiredError('affiliation','Required parameter affiliation was null or undefined when calling apiV1AffiliationsAffiliationGet.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling apiV1AffiliationsAffiliationGet.');
            }
            const localVarPath = `/api/v1/affiliations/{affiliation}`
                .replace(`{${"affiliation"}}`, encodeURIComponent(String(affiliation)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ca !== undefined) {
                localVarQueryParameter['ca'] = ca;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Rename an affiliation.   The caller must have **hf.AffiliationMgr** authority.
         * @param {Body5} body The request body
         * @param {string} authorization An enrollment token consisting of two base 64 encoded parts separated by a period:    * an enrollment certificate;    * a signature over the certificate and body of request.
         * @param {string} affiliation An affiliation path
         * @param {string} [ca] The name of the CA to direct this request to within the server, or the default CA if not specified
         * @param {boolean} [force] If any identities are associated with this affiliation, force causes these identities&#x27; affiliations to be renamed; otherwise, an error is returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AffiliationsAffiliationPut: async (body: Body5, authorization: string, affiliation: string, ca?: string, force?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling apiV1AffiliationsAffiliationPut.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling apiV1AffiliationsAffiliationPut.');
            }
            // verify required parameter 'affiliation' is not null or undefined
            if (affiliation === null || affiliation === undefined) {
                throw new RequiredError('affiliation','Required parameter affiliation was null or undefined when calling apiV1AffiliationsAffiliationPut.');
            }
            const localVarPath = `/api/v1/affiliations/{affiliation}`
                .replace(`{${"affiliation"}}`, encodeURIComponent(String(affiliation)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ca !== undefined) {
                localVarQueryParameter['ca'] = ca;
            }

            if (force !== undefined) {
                localVarQueryParameter['force'] = force;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * List all affiliations equal to and below the caller's affiliation.   The caller must have **hf.AffiliationMgr** authority.
         * @param {string} authorization An enrollment token consisting of two base 64 encoded parts separated by a period:    * an enrollment certificate;    * a signature over the certificate and body of request.
         * @param {string} [ca] The name of the CA to direct this request to within the server, or the default CA if not specified
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AffiliationsGet: async (authorization: string, ca?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling apiV1AffiliationsGet.');
            }
            const localVarPath = `/api/v1/affiliations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ca !== undefined) {
                localVarQueryParameter['ca'] = ca;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new affiliation.   The caller must have **hf.AffiliationMgr** authority.
         * @param {Body4} body The request body
         * @param {string} authorization An enrollment token consisting of two base 64 encoded parts separated by a period:    * an enrollment certificate;    * a signature over the certificate and body of request.
         * @param {string} [ca] The name of the CA to direct this request to within the server, or the default CA if not specified
         * @param {boolean} [force] If any of the parent affiliations do not exist and **force** is true, create all parent affiliations also
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AffiliationsPost: async (body: Body4, authorization: string, ca?: string, force?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling apiV1AffiliationsPost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling apiV1AffiliationsPost.');
            }
            const localVarPath = `/api/v1/affiliations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ca !== undefined) {
                localVarQueryParameter['ca'] = ca;
            }

            if (force !== undefined) {
                localVarQueryParameter['force'] = force;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get CA information.
         * @param {string} [ca] The name of the CA to direct this request to within the server, or the default CA if not specified
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CainfoGet: async (ca?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/cainfo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ca !== undefined) {
                localVarQueryParameter['ca'] = ca;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get certificate(s).   The caller will be able to view certificates that it owns. In addition, if the caller has **hf.Registrar.Roles** or **hf.Revoker** attribute, it will be able to view certificates for identities that have affiliations equal to or below the caller's affiliation.
         * @param {string} authorization An enrollment token consisting of two base 64 encoded parts separated by a period:    * an enrollment certificate;    * a signature over the certificate and body of request.
         * @param {string} [id] The enrollment ID that uniquely identifies an identity
         * @param {string} [aki] The AKI for a certificate
         * @param {string} [serial] The serial number for a certificate
         * @param {string} [revokedStart] Get revoked certificates starting at the specified time, either as timestamp (RFC3339 format) or duration (-30d)
         * @param {string} [revokedEnd] Get revoked certificates before the specified time, either as timestamp (RFC3339 format) or duration (-15d)
         * @param {string} [expiredStart] Get expired certificates starting at the specified time, either as timestamp (RFC3339 format) or duration (-30d)
         * @param {string} [expiredEnd] Get expired certificates before the specified time, either as timestamp (RFC3339 format) or duration (-15d)
         * @param {boolean} [notexpired] Don&#x27;t return expired certificates
         * @param {boolean} [notrevoked] Don&#x27;t return revoked certificates
         * @param {string} [ca] The name of the CA to direct this request to within the server, or the default CA if not specified
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CertificatesGet: async (authorization: string, id?: string, aki?: string, serial?: string, revokedStart?: string, revokedEnd?: string, expiredStart?: string, expiredEnd?: string, notexpired?: boolean, notrevoked?: boolean, ca?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling apiV1CertificatesGet.');
            }
            const localVarPath = `/api/v1/certificates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (aki !== undefined) {
                localVarQueryParameter['aki'] = aki;
            }

            if (serial !== undefined) {
                localVarQueryParameter['serial'] = serial;
            }

            if (revokedStart !== undefined) {
                localVarQueryParameter['revoked_start'] = revokedStart;
            }

            if (revokedEnd !== undefined) {
                localVarQueryParameter['revoked_end'] = revokedEnd;
            }

            if (expiredStart !== undefined) {
                localVarQueryParameter['expired_start'] = expiredStart;
            }

            if (expiredEnd !== undefined) {
                localVarQueryParameter['expired_end'] = expiredEnd;
            }

            if (notexpired !== undefined) {
                localVarQueryParameter['notexpired'] = notexpired;
            }

            if (notrevoked !== undefined) {
                localVarQueryParameter['notrevoked'] = notrevoked;
            }

            if (ca !== undefined) {
                localVarQueryParameter['ca'] = ca;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Enroll a new identity and return an enrollment certificate.
         * @param {Body} body The request body
         * @param {string} authorization An HTTP basic authorization header where:   *  *user* is the enrollment ID;   *  *password* is the enrollment secret.
         * @param {string} [ca] The name of the CA to direct this request to within the server, or the default CA if not specified
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1EnrollPost: async (body: Body, authorization: string, ca?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling apiV1EnrollPost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling apiV1EnrollPost.');
            }
            const localVarPath = `/api/v1/enroll`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ca !== undefined) {
                localVarQueryParameter['ca'] = ca;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Generates a Certifcate Revocation List (CRL)
         * @param {any} body The request body
         * @param {string} authorization An enrollment token consisting of two base 64 encoded parts separated by a period:    * an enrollment certificate;    * a signature over the certificate and body of request.
         * @param {string} [ca] The name of the CA to direct this request to within the server, or the default CA if not specified
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1GencrlPost: async (body: any, authorization: string, ca?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling apiV1GencrlPost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling apiV1GencrlPost.');
            }
            const localVarPath = `/api/v1/gencrl`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ca !== undefined) {
                localVarQueryParameter['ca'] = ca;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get an Identity Mixer credential. Identity Mixer credential issuance is a two step process. First, a request with empty request body is sent to this endpoint. The Fabric CA server will respond back with a nonce. This nonce should be used to create a credential request. Next, a request with the credential request in the request body is sent to this endpoint. The server will respond back with a credential.
         * @param {Body1} body The request body
         * @param {string} authorization **basic** &lt;base64 encoding of userid:password&gt; (OR) **token** &lt;An enrollment token consisting of two base 64 encoded parts separated by a period:  an enrollment certificate; a signature over the certificate and body of request&gt;
         * @param {string} [ca] The name of the CA to direct this request to within the server, or the default CA if not specified
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IdemixCredentialPost: async (body: Body1, authorization: string, ca?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling apiV1IdemixCredentialPost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling apiV1IdemixCredentialPost.');
            }
            const localVarPath = `/api/v1/idemix/credential`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ca !== undefined) {
                localVarQueryParameter['ca'] = ca;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Gats an Idemix Credential Revocation Information (CRI)
         * @param {any} body The request body
         * @param {string} authorization An authorization token based on Idemix credential or X509 certificate
         * @param {string} [ca] The name of the CA to direct this request to within the server, or the default CA if not specified
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IdemixCriPost: async (body: any, authorization: string, ca?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling apiV1IdemixCriPost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling apiV1IdemixCriPost.');
            }
            const localVarPath = `/api/v1/idemix/cri`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ca !== undefined) {
                localVarQueryParameter['ca'] = ca;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * List all identities that the caller is entitled to see.   The caller must have **hf.Registrar** authority.
         * @param {string} authorization An enrollment token consisting of two base 64 encoded parts separated by a period:    * an enrollment certificate;    * a signature over the certificate and body of request.
         * @param {string} [ca] The name of the CA to direct this request to within the server, or the default CA if not specified
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IdentitiesGet: async (authorization: string, ca?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling apiV1IdentitiesGet.');
            }
            const localVarPath = `/api/v1/identities`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ca !== undefined) {
                localVarQueryParameter['ca'] = ca;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an existing identity.    The caller must have **hf.Registrar** authority.
         * @param {string} id An enrollment ID
         * @param {string} authorization An enrollment token consisting of two base 64 encoded parts separated by a period:    * an enrollment certificate;    * a signature over the certificate and body of request.
         * @param {string} [ca] The name of the CA to direct this request to within the server, or the default CA if not specified
         * @param {boolean} [force] Required to delete your own identity
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IdentitiesIdDelete: async (id: string, authorization: string, ca?: string, force?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiV1IdentitiesIdDelete.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling apiV1IdentitiesIdDelete.');
            }
            const localVarPath = `/api/v1/identities/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ca !== undefined) {
                localVarQueryParameter['ca'] = ca;
            }

            if (force !== undefined) {
                localVarQueryParameter['force'] = force;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get an identity.   The caller must have **hf.Registrar** authority.
         * @param {string} id An enrollment ID
         * @param {string} authorization An enrollment token consisting of two base 64 encoded parts separated by a period:    * an enrollment certificate;    * a signature over the certificate and body of request.
         * @param {string} [ca] The name of the CA to direct this request to within the server, or the default CA if not specified
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IdentitiesIdGet: async (id: string, authorization: string, ca?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiV1IdentitiesIdGet.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling apiV1IdentitiesIdGet.');
            }
            const localVarPath = `/api/v1/identities/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ca !== undefined) {
                localVarQueryParameter['ca'] = ca;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an existing identity.    The caller must have **hf.Registrar** authority.
         * @param {Body7} body The request body
         * @param {string} authorization An enrollment token consisting of two base 64 encoded parts separated by a period:    * an enrollment certificate;    * a signature over the certificate and body of request.
         * @param {string} id An enrollment ID
         * @param {string} [ca] The name of the CA to direct this request to within the server, or the default CA if not specified
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IdentitiesIdPut: async (body: Body7, authorization: string, id: string, ca?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling apiV1IdentitiesIdPut.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling apiV1IdentitiesIdPut.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiV1IdentitiesIdPut.');
            }
            const localVarPath = `/api/v1/identities/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ca !== undefined) {
                localVarQueryParameter['ca'] = ca;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new identity with the Fabric CA server.    An enrollment secret is returned which can then be used, along with the enrollment ID, to enroll a new identity.    The caller must have **hf.Registrar** authority.
         * @param {Body6} body The request body
         * @param {string} authorization An enrollment token consisting of two base 64 encoded parts separated by a period:    * an enrollment certificate;    * a signature over the certificate and body of request.
         * @param {string} [ca] The name of the CA to direct this request to within the server, or the default CA if not specified
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IdentitiesPost: async (body: Body6, authorization: string, ca?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling apiV1IdentitiesPost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling apiV1IdentitiesPost.');
            }
            const localVarPath = `/api/v1/identities`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ca !== undefined) {
                localVarQueryParameter['ca'] = ca;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Reenroll an enrollment certificate.  This is useful for renewing an enrollment certificate before it expires or because it has been compromised. 
         * @param {Body2} body The request body
         * @param {string} authorization An enrollment token consisting of two base 64 encoded parts separated by a period:    * an enrollment certificate;    * a signature over the certificate and body of request.
         * @param {string} [ca] The name of the CA to direct this request to within the server, or the default CA if not specified
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ReenrollPost: async (body: Body2, authorization: string, ca?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling apiV1ReenrollPost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling apiV1ReenrollPost.');
            }
            const localVarPath = `/api/v1/reenroll`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ca !== undefined) {
                localVarQueryParameter['ca'] = ca;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Register a new identity with the Fabric CA server.    An enrollment secret is returned which can then be used, along with the enrollment ID, to enroll a new identity.    The caller must have **hf.Registrar** authority.
         * @param {Body3} body The request body
         * @param {string} authorization An enrollment token consisting of two base 64 encoded parts separated by a period:    * an enrollment certificate;    * a signature over the certificate and body of request.
         * @param {string} [ca] The name of the CA to direct this request to within the server, or the default CA if not specified
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1RegisterPost: async (body: Body3, authorization: string, ca?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling apiV1RegisterPost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling apiV1RegisterPost.');
            }
            const localVarPath = `/api/v1/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ca !== undefined) {
                localVarQueryParameter['ca'] = ca;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Perform revocation of one of the following:   * a specific certificate identified by a serial number and AKI (Authority Key Identitifer), or    * all certificates associated with the identity and prevent any future enrollments for this identity.    The caller must have the **hf.Revoker** attribute.
         * @param {any} body The request body
         * @param {string} authorization An enrollment token consisting of two base 64 encoded parts separated by a period:    * an enrollment certificate;    * a signature over the certificate and body of request.
         * @param {string} [ca] The name of the CA to direct this request to within the server, or the default CA if not specified
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1RevokePost: async (body: any, authorization: string, ca?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling apiV1RevokePost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling apiV1RevokePost.');
            }
            const localVarPath = `/api/v1/revoke`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ca !== undefined) {
                localVarQueryParameter['ca'] = ca;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FabricCaServerApi - functional programming interface
 * @export
 */
export const FabricCaServerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Delete an affiliation.   The caller must have **hf.AffiliationMgr** authority.
         * @param {string} affiliation An affiliation path
         * @param {string} authorization An enrollment token consisting of two base 64 encoded parts separated by a period:    * an enrollment certificate;    * a signature over the certificate and body of request.
         * @param {string} [ca] The name of the CA to direct this request to within the server, or the default CA if not specified
         * @param {boolean} [force] If there are any child affiliations or any identities are associated with this affiliation or child affiliations, force causes these identities and child affiliations to be deleted; otherwise, an error is returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AffiliationsAffiliationDelete(affiliation: string, authorization: string, ca?: string, force?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2004>> {
            const localVarAxiosArgs = await FabricCaServerApiAxiosParamCreator(configuration).apiV1AffiliationsAffiliationDelete(affiliation, authorization, ca, force, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * List a specific affiliation at or below the caller's affinity.   The caller must have **hf.AffiliationMgr** authority.
         * @param {string} affiliation An affiliation path
         * @param {string} authorization An enrollment token consisting of two base 64 encoded parts separated by a period:    * an enrollment certificate;    * a signature over the certificate and body of request.
         * @param {string} [ca] The name of the CA to direct this request to within the server, or the default CA if not specified
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AffiliationsAffiliationGet(affiliation: string, authorization: string, ca?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2004>> {
            const localVarAxiosArgs = await FabricCaServerApiAxiosParamCreator(configuration).apiV1AffiliationsAffiliationGet(affiliation, authorization, ca, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Rename an affiliation.   The caller must have **hf.AffiliationMgr** authority.
         * @param {Body5} body The request body
         * @param {string} authorization An enrollment token consisting of two base 64 encoded parts separated by a period:    * an enrollment certificate;    * a signature over the certificate and body of request.
         * @param {string} affiliation An affiliation path
         * @param {string} [ca] The name of the CA to direct this request to within the server, or the default CA if not specified
         * @param {boolean} [force] If any identities are associated with this affiliation, force causes these identities&#x27; affiliations to be renamed; otherwise, an error is returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AffiliationsAffiliationPut(body: Body5, authorization: string, affiliation: string, ca?: string, force?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2004>> {
            const localVarAxiosArgs = await FabricCaServerApiAxiosParamCreator(configuration).apiV1AffiliationsAffiliationPut(body, authorization, affiliation, ca, force, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * List all affiliations equal to and below the caller's affiliation.   The caller must have **hf.AffiliationMgr** authority.
         * @param {string} authorization An enrollment token consisting of two base 64 encoded parts separated by a period:    * an enrollment certificate;    * a signature over the certificate and body of request.
         * @param {string} [ca] The name of the CA to direct this request to within the server, or the default CA if not specified
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AffiliationsGet(authorization: string, ca?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2004>> {
            const localVarAxiosArgs = await FabricCaServerApiAxiosParamCreator(configuration).apiV1AffiliationsGet(authorization, ca, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create a new affiliation.   The caller must have **hf.AffiliationMgr** authority.
         * @param {Body4} body The request body
         * @param {string} authorization An enrollment token consisting of two base 64 encoded parts separated by a period:    * an enrollment certificate;    * a signature over the certificate and body of request.
         * @param {string} [ca] The name of the CA to direct this request to within the server, or the default CA if not specified
         * @param {boolean} [force] If any of the parent affiliations do not exist and **force** is true, create all parent affiliations also
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AffiliationsPost(body: Body4, authorization: string, ca?: string, force?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2013>> {
            const localVarAxiosArgs = await FabricCaServerApiAxiosParamCreator(configuration).apiV1AffiliationsPost(body, authorization, ca, force, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get CA information.
         * @param {string} [ca] The name of the CA to direct this request to within the server, or the default CA if not specified
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1CainfoGet(ca?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200>> {
            const localVarAxiosArgs = await FabricCaServerApiAxiosParamCreator(configuration).apiV1CainfoGet(ca, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get certificate(s).   The caller will be able to view certificates that it owns. In addition, if the caller has **hf.Registrar.Roles** or **hf.Revoker** attribute, it will be able to view certificates for identities that have affiliations equal to or below the caller's affiliation.
         * @param {string} authorization An enrollment token consisting of two base 64 encoded parts separated by a period:    * an enrollment certificate;    * a signature over the certificate and body of request.
         * @param {string} [id] The enrollment ID that uniquely identifies an identity
         * @param {string} [aki] The AKI for a certificate
         * @param {string} [serial] The serial number for a certificate
         * @param {string} [revokedStart] Get revoked certificates starting at the specified time, either as timestamp (RFC3339 format) or duration (-30d)
         * @param {string} [revokedEnd] Get revoked certificates before the specified time, either as timestamp (RFC3339 format) or duration (-15d)
         * @param {string} [expiredStart] Get expired certificates starting at the specified time, either as timestamp (RFC3339 format) or duration (-30d)
         * @param {string} [expiredEnd] Get expired certificates before the specified time, either as timestamp (RFC3339 format) or duration (-15d)
         * @param {boolean} [notexpired] Don&#x27;t return expired certificates
         * @param {boolean} [notrevoked] Don&#x27;t return revoked certificates
         * @param {string} [ca] The name of the CA to direct this request to within the server, or the default CA if not specified
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1CertificatesGet(authorization: string, id?: string, aki?: string, serial?: string, revokedStart?: string, revokedEnd?: string, expiredStart?: string, expiredEnd?: string, notexpired?: boolean, notrevoked?: boolean, ca?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2008>> {
            const localVarAxiosArgs = await FabricCaServerApiAxiosParamCreator(configuration).apiV1CertificatesGet(authorization, id, aki, serial, revokedStart, revokedEnd, expiredStart, expiredEnd, notexpired, notrevoked, ca, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Enroll a new identity and return an enrollment certificate.
         * @param {Body} body The request body
         * @param {string} authorization An HTTP basic authorization header where:   *  *user* is the enrollment ID;   *  *password* is the enrollment secret.
         * @param {string} [ca] The name of the CA to direct this request to within the server, or the default CA if not specified
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1EnrollPost(body: Body, authorization: string, ca?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse201>> {
            const localVarAxiosArgs = await FabricCaServerApiAxiosParamCreator(configuration).apiV1EnrollPost(body, authorization, ca, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Generates a Certifcate Revocation List (CRL)
         * @param {any} body The request body
         * @param {string} authorization An enrollment token consisting of two base 64 encoded parts separated by a period:    * an enrollment certificate;    * a signature over the certificate and body of request.
         * @param {string} [ca] The name of the CA to direct this request to within the server, or the default CA if not specified
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1GencrlPost(body: any, authorization: string, ca?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2003>> {
            const localVarAxiosArgs = await FabricCaServerApiAxiosParamCreator(configuration).apiV1GencrlPost(body, authorization, ca, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get an Identity Mixer credential. Identity Mixer credential issuance is a two step process. First, a request with empty request body is sent to this endpoint. The Fabric CA server will respond back with a nonce. This nonce should be used to create a credential request. Next, a request with the credential request in the request body is sent to this endpoint. The server will respond back with a credential.
         * @param {Body1} body The request body
         * @param {string} authorization **basic** &lt;base64 encoding of userid:password&gt; (OR) **token** &lt;An enrollment token consisting of two base 64 encoded parts separated by a period:  an enrollment certificate; a signature over the certificate and body of request&gt;
         * @param {string} [ca] The name of the CA to direct this request to within the server, or the default CA if not specified
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1IdemixCredentialPost(body: Body1, authorization: string, ca?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2011>> {
            const localVarAxiosArgs = await FabricCaServerApiAxiosParamCreator(configuration).apiV1IdemixCredentialPost(body, authorization, ca, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Gats an Idemix Credential Revocation Information (CRI)
         * @param {any} body The request body
         * @param {string} authorization An authorization token based on Idemix credential or X509 certificate
         * @param {string} [ca] The name of the CA to direct this request to within the server, or the default CA if not specified
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1IdemixCriPost(body: any, authorization: string, ca?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2001>> {
            const localVarAxiosArgs = await FabricCaServerApiAxiosParamCreator(configuration).apiV1IdemixCriPost(body, authorization, ca, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * List all identities that the caller is entitled to see.   The caller must have **hf.Registrar** authority.
         * @param {string} authorization An enrollment token consisting of two base 64 encoded parts separated by a period:    * an enrollment certificate;    * a signature over the certificate and body of request.
         * @param {string} [ca] The name of the CA to direct this request to within the server, or the default CA if not specified
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1IdentitiesGet(authorization: string, ca?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2005>> {
            const localVarAxiosArgs = await FabricCaServerApiAxiosParamCreator(configuration).apiV1IdentitiesGet(authorization, ca, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete an existing identity.    The caller must have **hf.Registrar** authority.
         * @param {string} id An enrollment ID
         * @param {string} authorization An enrollment token consisting of two base 64 encoded parts separated by a period:    * an enrollment certificate;    * a signature over the certificate and body of request.
         * @param {string} [ca] The name of the CA to direct this request to within the server, or the default CA if not specified
         * @param {boolean} [force] Required to delete your own identity
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1IdentitiesIdDelete(id: string, authorization: string, ca?: string, force?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2007>> {
            const localVarAxiosArgs = await FabricCaServerApiAxiosParamCreator(configuration).apiV1IdentitiesIdDelete(id, authorization, ca, force, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get an identity.   The caller must have **hf.Registrar** authority.
         * @param {string} id An enrollment ID
         * @param {string} authorization An enrollment token consisting of two base 64 encoded parts separated by a period:    * an enrollment certificate;    * a signature over the certificate and body of request.
         * @param {string} [ca] The name of the CA to direct this request to within the server, or the default CA if not specified
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1IdentitiesIdGet(id: string, authorization: string, ca?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2014>> {
            const localVarAxiosArgs = await FabricCaServerApiAxiosParamCreator(configuration).apiV1IdentitiesIdGet(id, authorization, ca, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update an existing identity.    The caller must have **hf.Registrar** authority.
         * @param {Body7} body The request body
         * @param {string} authorization An enrollment token consisting of two base 64 encoded parts separated by a period:    * an enrollment certificate;    * a signature over the certificate and body of request.
         * @param {string} id An enrollment ID
         * @param {string} [ca] The name of the CA to direct this request to within the server, or the default CA if not specified
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1IdentitiesIdPut(body: Body7, authorization: string, id: string, ca?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2006>> {
            const localVarAxiosArgs = await FabricCaServerApiAxiosParamCreator(configuration).apiV1IdentitiesIdPut(body, authorization, id, ca, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create a new identity with the Fabric CA server.    An enrollment secret is returned which can then be used, along with the enrollment ID, to enroll a new identity.    The caller must have **hf.Registrar** authority.
         * @param {Body6} body The request body
         * @param {string} authorization An enrollment token consisting of two base 64 encoded parts separated by a period:    * an enrollment certificate;    * a signature over the certificate and body of request.
         * @param {string} [ca] The name of the CA to direct this request to within the server, or the default CA if not specified
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1IdentitiesPost(body: Body6, authorization: string, ca?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2014>> {
            const localVarAxiosArgs = await FabricCaServerApiAxiosParamCreator(configuration).apiV1IdentitiesPost(body, authorization, ca, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Reenroll an enrollment certificate.  This is useful for renewing an enrollment certificate before it expires or because it has been compromised. 
         * @param {Body2} body The request body
         * @param {string} authorization An enrollment token consisting of two base 64 encoded parts separated by a period:    * an enrollment certificate;    * a signature over the certificate and body of request.
         * @param {string} [ca] The name of the CA to direct this request to within the server, or the default CA if not specified
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ReenrollPost(body: Body2, authorization: string, ca?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse201>> {
            const localVarAxiosArgs = await FabricCaServerApiAxiosParamCreator(configuration).apiV1ReenrollPost(body, authorization, ca, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Register a new identity with the Fabric CA server.    An enrollment secret is returned which can then be used, along with the enrollment ID, to enroll a new identity.    The caller must have **hf.Registrar** authority.
         * @param {Body3} body The request body
         * @param {string} authorization An enrollment token consisting of two base 64 encoded parts separated by a period:    * an enrollment certificate;    * a signature over the certificate and body of request.
         * @param {string} [ca] The name of the CA to direct this request to within the server, or the default CA if not specified
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1RegisterPost(body: Body3, authorization: string, ca?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2012>> {
            const localVarAxiosArgs = await FabricCaServerApiAxiosParamCreator(configuration).apiV1RegisterPost(body, authorization, ca, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Perform revocation of one of the following:   * a specific certificate identified by a serial number and AKI (Authority Key Identitifer), or    * all certificates associated with the identity and prevent any future enrollments for this identity.    The caller must have the **hf.Revoker** attribute.
         * @param {any} body The request body
         * @param {string} authorization An enrollment token consisting of two base 64 encoded parts separated by a period:    * an enrollment certificate;    * a signature over the certificate and body of request.
         * @param {string} [ca] The name of the CA to direct this request to within the server, or the default CA if not specified
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1RevokePost(body: any, authorization: string, ca?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2002>> {
            const localVarAxiosArgs = await FabricCaServerApiAxiosParamCreator(configuration).apiV1RevokePost(body, authorization, ca, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * FabricCaServerApi - factory interface
 * @export
 */
export const FabricCaServerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Delete an affiliation.   The caller must have **hf.AffiliationMgr** authority.
         * @param {string} affiliation An affiliation path
         * @param {string} authorization An enrollment token consisting of two base 64 encoded parts separated by a period:    * an enrollment certificate;    * a signature over the certificate and body of request.
         * @param {string} [ca] The name of the CA to direct this request to within the server, or the default CA if not specified
         * @param {boolean} [force] If there are any child affiliations or any identities are associated with this affiliation or child affiliations, force causes these identities and child affiliations to be deleted; otherwise, an error is returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AffiliationsAffiliationDelete(affiliation: string, authorization: string, ca?: string, force?: boolean, options?: any): AxiosPromise<InlineResponse2004> {
            return FabricCaServerApiFp(configuration).apiV1AffiliationsAffiliationDelete(affiliation, authorization, ca, force, options).then((request) => request(axios, basePath));
        },
        /**
         * List a specific affiliation at or below the caller's affinity.   The caller must have **hf.AffiliationMgr** authority.
         * @param {string} affiliation An affiliation path
         * @param {string} authorization An enrollment token consisting of two base 64 encoded parts separated by a period:    * an enrollment certificate;    * a signature over the certificate and body of request.
         * @param {string} [ca] The name of the CA to direct this request to within the server, or the default CA if not specified
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AffiliationsAffiliationGet(affiliation: string, authorization: string, ca?: string, options?: any): AxiosPromise<InlineResponse2004> {
            return FabricCaServerApiFp(configuration).apiV1AffiliationsAffiliationGet(affiliation, authorization, ca, options).then((request) => request(axios, basePath));
        },
        /**
         * Rename an affiliation.   The caller must have **hf.AffiliationMgr** authority.
         * @param {Body5} body The request body
         * @param {string} authorization An enrollment token consisting of two base 64 encoded parts separated by a period:    * an enrollment certificate;    * a signature over the certificate and body of request.
         * @param {string} affiliation An affiliation path
         * @param {string} [ca] The name of the CA to direct this request to within the server, or the default CA if not specified
         * @param {boolean} [force] If any identities are associated with this affiliation, force causes these identities&#x27; affiliations to be renamed; otherwise, an error is returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AffiliationsAffiliationPut(body: Body5, authorization: string, affiliation: string, ca?: string, force?: boolean, options?: any): AxiosPromise<InlineResponse2004> {
            return FabricCaServerApiFp(configuration).apiV1AffiliationsAffiliationPut(body, authorization, affiliation, ca, force, options).then((request) => request(axios, basePath));
        },
        /**
         * List all affiliations equal to and below the caller's affiliation.   The caller must have **hf.AffiliationMgr** authority.
         * @param {string} authorization An enrollment token consisting of two base 64 encoded parts separated by a period:    * an enrollment certificate;    * a signature over the certificate and body of request.
         * @param {string} [ca] The name of the CA to direct this request to within the server, or the default CA if not specified
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AffiliationsGet(authorization: string, ca?: string, options?: any): AxiosPromise<InlineResponse2004> {
            return FabricCaServerApiFp(configuration).apiV1AffiliationsGet(authorization, ca, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new affiliation.   The caller must have **hf.AffiliationMgr** authority.
         * @param {Body4} body The request body
         * @param {string} authorization An enrollment token consisting of two base 64 encoded parts separated by a period:    * an enrollment certificate;    * a signature over the certificate and body of request.
         * @param {string} [ca] The name of the CA to direct this request to within the server, or the default CA if not specified
         * @param {boolean} [force] If any of the parent affiliations do not exist and **force** is true, create all parent affiliations also
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AffiliationsPost(body: Body4, authorization: string, ca?: string, force?: boolean, options?: any): AxiosPromise<InlineResponse2013> {
            return FabricCaServerApiFp(configuration).apiV1AffiliationsPost(body, authorization, ca, force, options).then((request) => request(axios, basePath));
        },
        /**
         * Get CA information.
         * @param {string} [ca] The name of the CA to direct this request to within the server, or the default CA if not specified
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CainfoGet(ca?: string, options?: any): AxiosPromise<InlineResponse200> {
            return FabricCaServerApiFp(configuration).apiV1CainfoGet(ca, options).then((request) => request(axios, basePath));
        },
        /**
         * Get certificate(s).   The caller will be able to view certificates that it owns. In addition, if the caller has **hf.Registrar.Roles** or **hf.Revoker** attribute, it will be able to view certificates for identities that have affiliations equal to or below the caller's affiliation.
         * @param {string} authorization An enrollment token consisting of two base 64 encoded parts separated by a period:    * an enrollment certificate;    * a signature over the certificate and body of request.
         * @param {string} [id] The enrollment ID that uniquely identifies an identity
         * @param {string} [aki] The AKI for a certificate
         * @param {string} [serial] The serial number for a certificate
         * @param {string} [revokedStart] Get revoked certificates starting at the specified time, either as timestamp (RFC3339 format) or duration (-30d)
         * @param {string} [revokedEnd] Get revoked certificates before the specified time, either as timestamp (RFC3339 format) or duration (-15d)
         * @param {string} [expiredStart] Get expired certificates starting at the specified time, either as timestamp (RFC3339 format) or duration (-30d)
         * @param {string} [expiredEnd] Get expired certificates before the specified time, either as timestamp (RFC3339 format) or duration (-15d)
         * @param {boolean} [notexpired] Don&#x27;t return expired certificates
         * @param {boolean} [notrevoked] Don&#x27;t return revoked certificates
         * @param {string} [ca] The name of the CA to direct this request to within the server, or the default CA if not specified
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CertificatesGet(authorization: string, id?: string, aki?: string, serial?: string, revokedStart?: string, revokedEnd?: string, expiredStart?: string, expiredEnd?: string, notexpired?: boolean, notrevoked?: boolean, ca?: string, options?: any): AxiosPromise<InlineResponse2008> {
            return FabricCaServerApiFp(configuration).apiV1CertificatesGet(authorization, id, aki, serial, revokedStart, revokedEnd, expiredStart, expiredEnd, notexpired, notrevoked, ca, options).then((request) => request(axios, basePath));
        },
        /**
         * Enroll a new identity and return an enrollment certificate.
         * @param {Body} body The request body
         * @param {string} authorization An HTTP basic authorization header where:   *  *user* is the enrollment ID;   *  *password* is the enrollment secret.
         * @param {string} [ca] The name of the CA to direct this request to within the server, or the default CA if not specified
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1EnrollPost(body: Body, authorization: string, ca?: string, options?: any): AxiosPromise<InlineResponse201> {
            return FabricCaServerApiFp(configuration).apiV1EnrollPost(body, authorization, ca, options).then((request) => request(axios, basePath));
        },
        /**
         * Generates a Certifcate Revocation List (CRL)
         * @param {any} body The request body
         * @param {string} authorization An enrollment token consisting of two base 64 encoded parts separated by a period:    * an enrollment certificate;    * a signature over the certificate and body of request.
         * @param {string} [ca] The name of the CA to direct this request to within the server, or the default CA if not specified
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1GencrlPost(body: any, authorization: string, ca?: string, options?: any): AxiosPromise<InlineResponse2003> {
            return FabricCaServerApiFp(configuration).apiV1GencrlPost(body, authorization, ca, options).then((request) => request(axios, basePath));
        },
        /**
         * Get an Identity Mixer credential. Identity Mixer credential issuance is a two step process. First, a request with empty request body is sent to this endpoint. The Fabric CA server will respond back with a nonce. This nonce should be used to create a credential request. Next, a request with the credential request in the request body is sent to this endpoint. The server will respond back with a credential.
         * @param {Body1} body The request body
         * @param {string} authorization **basic** &lt;base64 encoding of userid:password&gt; (OR) **token** &lt;An enrollment token consisting of two base 64 encoded parts separated by a period:  an enrollment certificate; a signature over the certificate and body of request&gt;
         * @param {string} [ca] The name of the CA to direct this request to within the server, or the default CA if not specified
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IdemixCredentialPost(body: Body1, authorization: string, ca?: string, options?: any): AxiosPromise<InlineResponse2011> {
            return FabricCaServerApiFp(configuration).apiV1IdemixCredentialPost(body, authorization, ca, options).then((request) => request(axios, basePath));
        },
        /**
         * Gats an Idemix Credential Revocation Information (CRI)
         * @param {any} body The request body
         * @param {string} authorization An authorization token based on Idemix credential or X509 certificate
         * @param {string} [ca] The name of the CA to direct this request to within the server, or the default CA if not specified
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IdemixCriPost(body: any, authorization: string, ca?: string, options?: any): AxiosPromise<InlineResponse2001> {
            return FabricCaServerApiFp(configuration).apiV1IdemixCriPost(body, authorization, ca, options).then((request) => request(axios, basePath));
        },
        /**
         * List all identities that the caller is entitled to see.   The caller must have **hf.Registrar** authority.
         * @param {string} authorization An enrollment token consisting of two base 64 encoded parts separated by a period:    * an enrollment certificate;    * a signature over the certificate and body of request.
         * @param {string} [ca] The name of the CA to direct this request to within the server, or the default CA if not specified
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IdentitiesGet(authorization: string, ca?: string, options?: any): AxiosPromise<InlineResponse2005> {
            return FabricCaServerApiFp(configuration).apiV1IdentitiesGet(authorization, ca, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an existing identity.    The caller must have **hf.Registrar** authority.
         * @param {string} id An enrollment ID
         * @param {string} authorization An enrollment token consisting of two base 64 encoded parts separated by a period:    * an enrollment certificate;    * a signature over the certificate and body of request.
         * @param {string} [ca] The name of the CA to direct this request to within the server, or the default CA if not specified
         * @param {boolean} [force] Required to delete your own identity
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IdentitiesIdDelete(id: string, authorization: string, ca?: string, force?: boolean, options?: any): AxiosPromise<InlineResponse2007> {
            return FabricCaServerApiFp(configuration).apiV1IdentitiesIdDelete(id, authorization, ca, force, options).then((request) => request(axios, basePath));
        },
        /**
         * Get an identity.   The caller must have **hf.Registrar** authority.
         * @param {string} id An enrollment ID
         * @param {string} authorization An enrollment token consisting of two base 64 encoded parts separated by a period:    * an enrollment certificate;    * a signature over the certificate and body of request.
         * @param {string} [ca] The name of the CA to direct this request to within the server, or the default CA if not specified
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IdentitiesIdGet(id: string, authorization: string, ca?: string, options?: any): AxiosPromise<InlineResponse2014> {
            return FabricCaServerApiFp(configuration).apiV1IdentitiesIdGet(id, authorization, ca, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an existing identity.    The caller must have **hf.Registrar** authority.
         * @param {Body7} body The request body
         * @param {string} authorization An enrollment token consisting of two base 64 encoded parts separated by a period:    * an enrollment certificate;    * a signature over the certificate and body of request.
         * @param {string} id An enrollment ID
         * @param {string} [ca] The name of the CA to direct this request to within the server, or the default CA if not specified
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IdentitiesIdPut(body: Body7, authorization: string, id: string, ca?: string, options?: any): AxiosPromise<InlineResponse2006> {
            return FabricCaServerApiFp(configuration).apiV1IdentitiesIdPut(body, authorization, id, ca, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new identity with the Fabric CA server.    An enrollment secret is returned which can then be used, along with the enrollment ID, to enroll a new identity.    The caller must have **hf.Registrar** authority.
         * @param {Body6} body The request body
         * @param {string} authorization An enrollment token consisting of two base 64 encoded parts separated by a period:    * an enrollment certificate;    * a signature over the certificate and body of request.
         * @param {string} [ca] The name of the CA to direct this request to within the server, or the default CA if not specified
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IdentitiesPost(body: Body6, authorization: string, ca?: string, options?: any): AxiosPromise<InlineResponse2014> {
            return FabricCaServerApiFp(configuration).apiV1IdentitiesPost(body, authorization, ca, options).then((request) => request(axios, basePath));
        },
        /**
         * Reenroll an enrollment certificate.  This is useful for renewing an enrollment certificate before it expires or because it has been compromised. 
         * @param {Body2} body The request body
         * @param {string} authorization An enrollment token consisting of two base 64 encoded parts separated by a period:    * an enrollment certificate;    * a signature over the certificate and body of request.
         * @param {string} [ca] The name of the CA to direct this request to within the server, or the default CA if not specified
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ReenrollPost(body: Body2, authorization: string, ca?: string, options?: any): AxiosPromise<InlineResponse201> {
            return FabricCaServerApiFp(configuration).apiV1ReenrollPost(body, authorization, ca, options).then((request) => request(axios, basePath));
        },
        /**
         * Register a new identity with the Fabric CA server.    An enrollment secret is returned which can then be used, along with the enrollment ID, to enroll a new identity.    The caller must have **hf.Registrar** authority.
         * @param {Body3} body The request body
         * @param {string} authorization An enrollment token consisting of two base 64 encoded parts separated by a period:    * an enrollment certificate;    * a signature over the certificate and body of request.
         * @param {string} [ca] The name of the CA to direct this request to within the server, or the default CA if not specified
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1RegisterPost(body: Body3, authorization: string, ca?: string, options?: any): AxiosPromise<InlineResponse2012> {
            return FabricCaServerApiFp(configuration).apiV1RegisterPost(body, authorization, ca, options).then((request) => request(axios, basePath));
        },
        /**
         * Perform revocation of one of the following:   * a specific certificate identified by a serial number and AKI (Authority Key Identitifer), or    * all certificates associated with the identity and prevent any future enrollments for this identity.    The caller must have the **hf.Revoker** attribute.
         * @param {any} body The request body
         * @param {string} authorization An enrollment token consisting of two base 64 encoded parts separated by a period:    * an enrollment certificate;    * a signature over the certificate and body of request.
         * @param {string} [ca] The name of the CA to direct this request to within the server, or the default CA if not specified
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1RevokePost(body: any, authorization: string, ca?: string, options?: any): AxiosPromise<InlineResponse2002> {
            return FabricCaServerApiFp(configuration).apiV1RevokePost(body, authorization, ca, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FabricCaServerApi - object-oriented interface
 * @export
 * @class FabricCaServerApi
 * @extends {BaseAPI}
 */
export class FabricCaServerApi extends BaseAPI {
    /**
     * Delete an affiliation.   The caller must have **hf.AffiliationMgr** authority.
     * @param {string} affiliation An affiliation path
     * @param {string} authorization An enrollment token consisting of two base 64 encoded parts separated by a period:    * an enrollment certificate;    * a signature over the certificate and body of request.
     * @param {string} [ca] The name of the CA to direct this request to within the server, or the default CA if not specified
     * @param {boolean} [force] If there are any child affiliations or any identities are associated with this affiliation or child affiliations, force causes these identities and child affiliations to be deleted; otherwise, an error is returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FabricCaServerApi
     */
    public apiV1AffiliationsAffiliationDelete(affiliation: string, authorization: string, ca?: string, force?: boolean, options?: any) {
        return FabricCaServerApiFp(this.configuration).apiV1AffiliationsAffiliationDelete(affiliation, authorization, ca, force, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a specific affiliation at or below the caller's affinity.   The caller must have **hf.AffiliationMgr** authority.
     * @param {string} affiliation An affiliation path
     * @param {string} authorization An enrollment token consisting of two base 64 encoded parts separated by a period:    * an enrollment certificate;    * a signature over the certificate and body of request.
     * @param {string} [ca] The name of the CA to direct this request to within the server, or the default CA if not specified
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FabricCaServerApi
     */
    public apiV1AffiliationsAffiliationGet(affiliation: string, authorization: string, ca?: string, options?: any) {
        return FabricCaServerApiFp(this.configuration).apiV1AffiliationsAffiliationGet(affiliation, authorization, ca, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Rename an affiliation.   The caller must have **hf.AffiliationMgr** authority.
     * @param {Body5} body The request body
     * @param {string} authorization An enrollment token consisting of two base 64 encoded parts separated by a period:    * an enrollment certificate;    * a signature over the certificate and body of request.
     * @param {string} affiliation An affiliation path
     * @param {string} [ca] The name of the CA to direct this request to within the server, or the default CA if not specified
     * @param {boolean} [force] If any identities are associated with this affiliation, force causes these identities&#x27; affiliations to be renamed; otherwise, an error is returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FabricCaServerApi
     */
    public apiV1AffiliationsAffiliationPut(body: Body5, authorization: string, affiliation: string, ca?: string, force?: boolean, options?: any) {
        return FabricCaServerApiFp(this.configuration).apiV1AffiliationsAffiliationPut(body, authorization, affiliation, ca, force, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List all affiliations equal to and below the caller's affiliation.   The caller must have **hf.AffiliationMgr** authority.
     * @param {string} authorization An enrollment token consisting of two base 64 encoded parts separated by a period:    * an enrollment certificate;    * a signature over the certificate and body of request.
     * @param {string} [ca] The name of the CA to direct this request to within the server, or the default CA if not specified
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FabricCaServerApi
     */
    public apiV1AffiliationsGet(authorization: string, ca?: string, options?: any) {
        return FabricCaServerApiFp(this.configuration).apiV1AffiliationsGet(authorization, ca, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a new affiliation.   The caller must have **hf.AffiliationMgr** authority.
     * @param {Body4} body The request body
     * @param {string} authorization An enrollment token consisting of two base 64 encoded parts separated by a period:    * an enrollment certificate;    * a signature over the certificate and body of request.
     * @param {string} [ca] The name of the CA to direct this request to within the server, or the default CA if not specified
     * @param {boolean} [force] If any of the parent affiliations do not exist and **force** is true, create all parent affiliations also
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FabricCaServerApi
     */
    public apiV1AffiliationsPost(body: Body4, authorization: string, ca?: string, force?: boolean, options?: any) {
        return FabricCaServerApiFp(this.configuration).apiV1AffiliationsPost(body, authorization, ca, force, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get CA information.
     * @param {string} [ca] The name of the CA to direct this request to within the server, or the default CA if not specified
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FabricCaServerApi
     */
    public apiV1CainfoGet(ca?: string, options?: any) {
        return FabricCaServerApiFp(this.configuration).apiV1CainfoGet(ca, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get certificate(s).   The caller will be able to view certificates that it owns. In addition, if the caller has **hf.Registrar.Roles** or **hf.Revoker** attribute, it will be able to view certificates for identities that have affiliations equal to or below the caller's affiliation.
     * @param {string} authorization An enrollment token consisting of two base 64 encoded parts separated by a period:    * an enrollment certificate;    * a signature over the certificate and body of request.
     * @param {string} [id] The enrollment ID that uniquely identifies an identity
     * @param {string} [aki] The AKI for a certificate
     * @param {string} [serial] The serial number for a certificate
     * @param {string} [revokedStart] Get revoked certificates starting at the specified time, either as timestamp (RFC3339 format) or duration (-30d)
     * @param {string} [revokedEnd] Get revoked certificates before the specified time, either as timestamp (RFC3339 format) or duration (-15d)
     * @param {string} [expiredStart] Get expired certificates starting at the specified time, either as timestamp (RFC3339 format) or duration (-30d)
     * @param {string} [expiredEnd] Get expired certificates before the specified time, either as timestamp (RFC3339 format) or duration (-15d)
     * @param {boolean} [notexpired] Don&#x27;t return expired certificates
     * @param {boolean} [notrevoked] Don&#x27;t return revoked certificates
     * @param {string} [ca] The name of the CA to direct this request to within the server, or the default CA if not specified
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FabricCaServerApi
     */
    public apiV1CertificatesGet(authorization: string, id?: string, aki?: string, serial?: string, revokedStart?: string, revokedEnd?: string, expiredStart?: string, expiredEnd?: string, notexpired?: boolean, notrevoked?: boolean, ca?: string, options?: any) {
        return FabricCaServerApiFp(this.configuration).apiV1CertificatesGet(authorization, id, aki, serial, revokedStart, revokedEnd, expiredStart, expiredEnd, notexpired, notrevoked, ca, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Enroll a new identity and return an enrollment certificate.
     * @param {Body} body The request body
     * @param {string} authorization An HTTP basic authorization header where:   *  *user* is the enrollment ID;   *  *password* is the enrollment secret.
     * @param {string} [ca] The name of the CA to direct this request to within the server, or the default CA if not specified
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FabricCaServerApi
     */
    public apiV1EnrollPost(body: Body, authorization: string, ca?: string, options?: any) {
        return FabricCaServerApiFp(this.configuration).apiV1EnrollPost(body, authorization, ca, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Generates a Certifcate Revocation List (CRL)
     * @param {any} body The request body
     * @param {string} authorization An enrollment token consisting of two base 64 encoded parts separated by a period:    * an enrollment certificate;    * a signature over the certificate and body of request.
     * @param {string} [ca] The name of the CA to direct this request to within the server, or the default CA if not specified
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FabricCaServerApi
     */
    public apiV1GencrlPost(body: any, authorization: string, ca?: string, options?: any) {
        return FabricCaServerApiFp(this.configuration).apiV1GencrlPost(body, authorization, ca, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get an Identity Mixer credential. Identity Mixer credential issuance is a two step process. First, a request with empty request body is sent to this endpoint. The Fabric CA server will respond back with a nonce. This nonce should be used to create a credential request. Next, a request with the credential request in the request body is sent to this endpoint. The server will respond back with a credential.
     * @param {Body1} body The request body
     * @param {string} authorization **basic** &lt;base64 encoding of userid:password&gt; (OR) **token** &lt;An enrollment token consisting of two base 64 encoded parts separated by a period:  an enrollment certificate; a signature over the certificate and body of request&gt;
     * @param {string} [ca] The name of the CA to direct this request to within the server, or the default CA if not specified
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FabricCaServerApi
     */
    public apiV1IdemixCredentialPost(body: Body1, authorization: string, ca?: string, options?: any) {
        return FabricCaServerApiFp(this.configuration).apiV1IdemixCredentialPost(body, authorization, ca, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Gats an Idemix Credential Revocation Information (CRI)
     * @param {any} body The request body
     * @param {string} authorization An authorization token based on Idemix credential or X509 certificate
     * @param {string} [ca] The name of the CA to direct this request to within the server, or the default CA if not specified
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FabricCaServerApi
     */
    public apiV1IdemixCriPost(body: any, authorization: string, ca?: string, options?: any) {
        return FabricCaServerApiFp(this.configuration).apiV1IdemixCriPost(body, authorization, ca, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List all identities that the caller is entitled to see.   The caller must have **hf.Registrar** authority.
     * @param {string} authorization An enrollment token consisting of two base 64 encoded parts separated by a period:    * an enrollment certificate;    * a signature over the certificate and body of request.
     * @param {string} [ca] The name of the CA to direct this request to within the server, or the default CA if not specified
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FabricCaServerApi
     */
    public apiV1IdentitiesGet(authorization: string, ca?: string, options?: any) {
        return FabricCaServerApiFp(this.configuration).apiV1IdentitiesGet(authorization, ca, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete an existing identity.    The caller must have **hf.Registrar** authority.
     * @param {string} id An enrollment ID
     * @param {string} authorization An enrollment token consisting of two base 64 encoded parts separated by a period:    * an enrollment certificate;    * a signature over the certificate and body of request.
     * @param {string} [ca] The name of the CA to direct this request to within the server, or the default CA if not specified
     * @param {boolean} [force] Required to delete your own identity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FabricCaServerApi
     */
    public apiV1IdentitiesIdDelete(id: string, authorization: string, ca?: string, force?: boolean, options?: any) {
        return FabricCaServerApiFp(this.configuration).apiV1IdentitiesIdDelete(id, authorization, ca, force, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get an identity.   The caller must have **hf.Registrar** authority.
     * @param {string} id An enrollment ID
     * @param {string} authorization An enrollment token consisting of two base 64 encoded parts separated by a period:    * an enrollment certificate;    * a signature over the certificate and body of request.
     * @param {string} [ca] The name of the CA to direct this request to within the server, or the default CA if not specified
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FabricCaServerApi
     */
    public apiV1IdentitiesIdGet(id: string, authorization: string, ca?: string, options?: any) {
        return FabricCaServerApiFp(this.configuration).apiV1IdentitiesIdGet(id, authorization, ca, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update an existing identity.    The caller must have **hf.Registrar** authority.
     * @param {Body7} body The request body
     * @param {string} authorization An enrollment token consisting of two base 64 encoded parts separated by a period:    * an enrollment certificate;    * a signature over the certificate and body of request.
     * @param {string} id An enrollment ID
     * @param {string} [ca] The name of the CA to direct this request to within the server, or the default CA if not specified
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FabricCaServerApi
     */
    public apiV1IdentitiesIdPut(body: Body7, authorization: string, id: string, ca?: string, options?: any) {
        return FabricCaServerApiFp(this.configuration).apiV1IdentitiesIdPut(body, authorization, id, ca, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a new identity with the Fabric CA server.    An enrollment secret is returned which can then be used, along with the enrollment ID, to enroll a new identity.    The caller must have **hf.Registrar** authority.
     * @param {Body6} body The request body
     * @param {string} authorization An enrollment token consisting of two base 64 encoded parts separated by a period:    * an enrollment certificate;    * a signature over the certificate and body of request.
     * @param {string} [ca] The name of the CA to direct this request to within the server, or the default CA if not specified
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FabricCaServerApi
     */
    public apiV1IdentitiesPost(body: Body6, authorization: string, ca?: string, options?: any) {
        return FabricCaServerApiFp(this.configuration).apiV1IdentitiesPost(body, authorization, ca, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Reenroll an enrollment certificate.  This is useful for renewing an enrollment certificate before it expires or because it has been compromised. 
     * @param {Body2} body The request body
     * @param {string} authorization An enrollment token consisting of two base 64 encoded parts separated by a period:    * an enrollment certificate;    * a signature over the certificate and body of request.
     * @param {string} [ca] The name of the CA to direct this request to within the server, or the default CA if not specified
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FabricCaServerApi
     */
    public apiV1ReenrollPost(body: Body2, authorization: string, ca?: string, options?: any) {
        return FabricCaServerApiFp(this.configuration).apiV1ReenrollPost(body, authorization, ca, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Register a new identity with the Fabric CA server.    An enrollment secret is returned which can then be used, along with the enrollment ID, to enroll a new identity.    The caller must have **hf.Registrar** authority.
     * @param {Body3} body The request body
     * @param {string} authorization An enrollment token consisting of two base 64 encoded parts separated by a period:    * an enrollment certificate;    * a signature over the certificate and body of request.
     * @param {string} [ca] The name of the CA to direct this request to within the server, or the default CA if not specified
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FabricCaServerApi
     */
    public apiV1RegisterPost(body: Body3, authorization: string, ca?: string, options?: any) {
        return FabricCaServerApiFp(this.configuration).apiV1RegisterPost(body, authorization, ca, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Perform revocation of one of the following:   * a specific certificate identified by a serial number and AKI (Authority Key Identitifer), or    * all certificates associated with the identity and prevent any future enrollments for this identity.    The caller must have the **hf.Revoker** attribute.
     * @param {any} body The request body
     * @param {string} authorization An enrollment token consisting of two base 64 encoded parts separated by a period:    * an enrollment certificate;    * a signature over the certificate and body of request.
     * @param {string} [ca] The name of the CA to direct this request to within the server, or the default CA if not specified
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FabricCaServerApi
     */
    public apiV1RevokePost(body: any, authorization: string, ca?: string, options?: any) {
        return FabricCaServerApiFp(this.configuration).apiV1RevokePost(body, authorization, ca, options).then((request) => request(this.axios, this.basePath));
    }
}
